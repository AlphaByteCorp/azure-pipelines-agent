resources:
  containers:
  - container: dotnetcore_arm
    image: huangtingluo/azure-pipelines-agent-eng:arm

  - container: dotnetcore_centos6
    image: huangtingluo/azure-pipelines-agent-eng:centos6

stages:
- stage: Build
  dependsOn: Create_Release_Branch
  jobs:
  ################################################################################
  - job: build_linux_agent_arm64
  ################################################################################
    displayName: Linux Agent (ARM64)
    pool:
      name: buildDevs
      demands: 'Agent.OSArchitecture -equals ARM64'
    timeoutInMinutes: 75
    steps:

    # Steps template for non-windows platform
    - template: .vsts.template.nonwindows.yml
      parameters:
        testLogTitle: 'Linux-ARM64'

    # Create agent package zip
    - script: ./dev.sh package Release
      workingDirectory: src
      displayName: Package Release

    # Upload agent package zip as build artifact
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact (Linux)
      inputs:
        pathToPublish: _package
        artifactName: agent
        artifactType: container

- stage: Release
  dependsOn: Build
  jobs:
  ################################################################################
  - job: publish_agent_packages
  ################################################################################
    displayName: Publish Agents (Windows/Linux/OSX)
    pool:
      name: ProductionRMAgents
    steps:

    # Clean
    - checkout: self
      clean: true

    # Download all agent packages from all previous phases
    - task: DownloadBuildArtifacts@0
      displayName: Download Agent Packages
      inputs:
        artifactName: agent

    # Upload agent packages to Azure blob storage and refresh Azure CDN
    - powershell: |
        Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
        Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
        Enable-AzureRmAlias -Scope CurrentUser
        $uploadFiles = New-Object System.Collections.ArrayList
        $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
        $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
        Write-Host "##vso[task.setsecret]$certificateThumbprint"
        Write-Host "##vso[task.setsecret]$clientId"
        Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
        Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
        $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
        Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
          $executable = (Get-ChildItem "$(System.ArtifactsDirectory)/agent/$_")[0]
          $versionDir = $executable.Name.Trim('.zip').Trim('.tar.gz')
          $versionDir = $versionDir.SubString($versionDir.LastIndexOf('-') + 1)
          Write-Host "##vso[task.setvariable variable=ReleaseAgentVersion;]$versionDir"
          Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
          Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$_/$executable" -Blob "$versionDir/$executable" -Force
          $uploadFiles.Add("/agent/$versionDir/$executable")
        }
        Write-Host "Purge Azure CDN Cache"
        Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
        Write-Host "Force Refresh Azure CDN Cache"
        Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
      displayName: Upload to Azure Blob
